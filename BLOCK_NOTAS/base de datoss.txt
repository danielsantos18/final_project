INSERT INTO Puesto (id_puesto, nombre_puesto) VALUES
(001, 'administrador'),
(002, 'contador'),
(003, 'publicista'),
(004, 'asesor');


INSERT INTO Producto (id_producto, categoria, nombre, descripcion, precio) VALUES
(, 'Ropa Niño', 'Conjunto de sudadera y pantalón para niño', 'Conjunto cómodo de sudadera con capucha y pantalón deportivo para niños.', 75000.00),
(6, 'Ropa Niño', 'Camiseta estampada para niño', 'Camiseta de algodón con divertido estampado para niños de todas las edades.', 35000.00),
(7, 'Ropa Mujer', 'Vestido de cóctel con escote en V', 'Vestido elegante para mujer con escote en V y falda acampanada, ideal para eventos.', 185000.00),
(8, 'Ropa Mujer', 'Pantalón culotte de moda', 'Pantalón culotte de tela suave y caída fluida, perfecto para un look casual o de oficina.', 95000.00),
(9, 'Ropa Hombre', 'Camisa de vestir clásica', 'Camisa de vestir para hombre con cuello italiano y botones ocultos.', 125000.00),
(10, 'Ropa Hombre', 'Chaqueta de cuero sintético', 'Chaqueta de estilo motero confeccionada en cuero sintético de alta calidad.', 175000.00),
(11, 'Ropa Adolescente', 'Jeans skinny rasgados', 'Jeans ajustados para adolescentes con efecto desgastado y detalles rasgados.', 85000.00),
(12, 'Ropa Adolescente', 'Sudadera con capucha estilo urbano', 'Sudadera de estilo urbano con capucha y bolsillo canguro, ideal para el día a día.', 65000.00);



CREATE TABLE Categoria (
    id_categoria INT PRIMARY KEY,
    nombre_categoria VARCHAR(50)
);
CREATE TABLE Producto_Categoria (
    id_producto_categoria INT PRIMARY KEY,
    producto_id INT,
    categoria_id INT,
    FOREIGN KEY (producto_id) REFERENCES Producto(id_producto),
    FOREIGN KEY (categoria_id) REFERENCES Categoria(id_categoria)
);

-- Antes de las inserciones de Producto, primero eliminamos las inserciones previas en Producto_Categoria
DELETE FROM Producto_Categoria;

-- Luego, insertamos los productos y sus respectivas categorías
INSERT INTO Producto (id_producto, nombre, descripcion, precio) VALUES
(5, 'Suéter tejido de lana', 'Suéter unisex de lana suave y cálida, disponible en varios colores.', 85000.00),
(6, 'Pantalón vaquero ajustado', 'Pantalón vaquero para hombre o mujer, estilo ajustado y moderno.', 120000.00),
(7, 'Camisa de manga larga', 'Camisa de algodón con diseño a rayas y botones en contraste.', 75000.00),
(8, 'Vestido floral estampado', 'Vestido femenino con estampado floral y corte acinturado.', 145000.00),
(9, 'Falda plisada de moda', 'Falda corta plisada de tela ligera, perfecta para ocasiones casuales.', 95000.00),
(10, 'Blusa elegante con lazo', 'Blusa femenina con lazo en el cuello y detalles en encaje.', 105000.00),
(11, 'Conjunto de sudadera y pantalón para niño', 'Conjunto cómodo de sudadera con capucha y pantalón deportivo para niños.', 75000.00),
(12, 'Camiseta estampada para niño', 'Camiseta de algodón con divertido estampado para niños de todas las edades.', 35000.00),
-- Inserta más productos aquí...
;

-- Insertamos las relaciones entre productos y categorías en la tabla Producto_Categoria
INSERT INTO Producto_Categoria (id_producto_categoria, producto_id, categoria_id) VALUES
-- Productos de Ropa Mujer
(1, 5, 1),
(2, 8, 1),
(3, 10, 1),
-- Productos de Ropa Hombre
(4, 6, 2),
(5, 7, 2),
-- Productos de Ropa Niño
(6, 11, 3),
(7, 12, 3);
-- Inserta más relaciones de productos y categorías aquí...

-- Insertar más productos para la categoría 'Ropa Niña'
INSERT INTO Producto (id_producto, nombre, descripcion, precio) VALUES
(22, 'Vestido de princesa para niñas', 'Vestido elegante de princesa con falda de tul y detalles de encaje, ideal para ocasiones especiales.', 125000.00),
(23, 'Conjunto de blusa y falda para niñas', 'Conjunto de blusa con estampado floral y falda plisada, perfecto para un look femenino.', 99000.00);

-- Insertar más productos para la categoría 'Ropa Bebé'
INSERT INTO Producto (id_producto, nombre, descripcion, precio) VALUES
(24, 'Conjunto de body y pantalón para bebé', 'Conjunto adorable de body manga larga y pantalón con estampado de animalitos.', 55000.00),
(25, 'Mameluco de algodón para recién nacido', 'Mameluco suave y cómodo para bebés recién nacidos, con cierre frontal y estampado divertido.', 45000.00);

-- Insertar más productos para la categoría 'Ropa Adolescente'
INSERT INTO Producto (id_producto, nombre, descripcion, precio) VALUES
(26, 'Jeans skinny rasgados para adolescentes', 'Jeans ajustados para adolescentes con efecto desgastado y detalles rasgados.', 85000.00),
(27, 'Sudadera con capucha estilo urbano para adolescentes', 'Sudadera de estilo urbano con capucha y bolsillo canguro, ideal para el día a día.', 65000.00);

-- Insertar empleados para cada puesto
INSERT INTO Empleado (id_empleado, nombre, apellido, correo, contraseña, documento, puesto_id) VALUES
(1, 'xiomara', 'zabala', 'xiomara_admin@gmail.com', 'contraseña123', '123456789', 1), -- Administrador
(2, 'María', 'López', 'maria_contador@gmail.com', 'contraseña456', '987654321', 2), -- Contador
(3, 'Juan', 'Martínez', 'juan_publicista@hotmail.com', 'contraseña789', '654321987', 3), -- Publicista
(4, 'Ana', 'García', 'ana_asesor@gmail.com', 'contraseñaabc', '456789012', 4); -- Asesor

CREATE VIEW Vista_ProductosConCategoria AS
SELECT 
    p.id_producto, 
    c.nombre_categoria AS categoria, 
    p.nombre, 
    p.descripcion, 
    p.precio 
FROM 
    Producto p
JOIN 
    Producto_Categoria pc ON p.id_producto = pc.producto_id
JOIN 
    Categoria c ON pc.categoria_id = c.id_categoria;
------------------------------------------------------------------------------
CREATE VIEW Vista_Empleados_Con_Tareas AS
SELECT 
    e.id_empleado,
    e.nombre AS nombre_empleado,
    e.apellido AS apellido_empleado,
    p.nombre_puesto AS puesto,
    t.nombre_tarea AS tarea_asignada
FROM 
    Empleado e
JOIN 
    Puesto p ON e.puesto_id = p.id_puesto
LEFT JOIN 
    Empleado_Tarea et ON e.id_empleado = et.empleado_id
LEFT JOIN 
    Tarea t ON et.tarea_id = t.id_tarea;


(2, 'Activa', 'Marketing por correo electrónico', 3);

-------------------------------------------------------------------------------


CREATE VIEW Vista_Pedido_Cliente AS
SELECT 
    c.nombre AS nombre_cliente,
    c.apellido AS apellido_cliente,
    p.nombre AS nombre_producto,
    d.cantidad,
    d.subtotal AS subtotal_pedido,
    pd.estado AS estado_pedido
FROM 
    Pedido pd
JOIN 
    Cliente c ON pd.cliente_id = c.id_cliente
JOIN 
    Detalles_de_Pedido d ON pd.id_pedido = d.pedido_id
JOIN 
    Producto p ON d.producto_id = p.id_producto;
---------------------------------------------------------------

ALTER VIEW Vista_Pedido_Cliente_id AS
SELECT 
    pd.id_pedido,
    c.nombre AS nombre_cliente,
    c.apellido AS apellido_cliente,
    p.nombre AS nombre_producto,
    d.cantidad,
    d.subtotal AS subtotal_pedido,
    pd.estado AS estado_pedido
FROM 
    Pedido pd
JOIN 
    Cliente c ON pd.cliente_id = c.id_cliente
JOIN 
    Detalles_de_Pedido d ON pd.id_pedido = d.pedido_id
JOIN 
    Producto p ON d.producto_id = p.id_producto;

------------------------------------------------------------
1> CREATE VIEW Vista_Entidad_Pedido AS
2> SELECT
3>     ET.id_transporte AS id_entidad_transporte,
4>     ET.nombre AS nombre_entidad_transporte,
5>     E.id_envio,
6>     E.costo_envio,
7>     E.tipo AS tipo_envio,
8>     E.fecha_envio,
9>     E.estado AS estado_envio,
10>     P.id_pedido,
11>     P.estado AS estado_pedido
12> FROM
13>     Entidad_de_Transporte ET
14> JOIN
15>     Envio E ON ET.id_transporte = E.id_entidad_transporte
16> JOIN
17>     Pedido P ON E.pedido_id = P.id_pedido;
18> go


ALTER TABLE Pago (
    id_pago INT PRIMARY KEY,
    estado VARCHAR(50),
    metodo_de_pago VARCHAR(50),
    fecha_pago DATE,
    monto DECIMAL(10, 2),
    cliente_id INT,
    pedido_id INT, -- Nueva columna para referenciar el pedido
    FOREIGN KEY (cliente_id) REFERENCES Cliente(id_cliente),
    FOREIGN KEY (pedido_id) REFERENCES Pedido(id_pedido) -- Nueva clave foránea para el pedido
);



CREATE VIEW Vista_Pagos_Pedido AS
SELECT p.id_pedido,
       COUNT(pg.id_pago) AS cantidad_pagos,
       SUM(pg.monto) AS total_pagado,
       MAX(p.estado) AS estado_pedido,
       MAX(p.metodo_de_pago) AS metodo_de_pago
FROM Pedido p
LEFT JOIN Pago pg ON p.id_pedido = pg.pedido_id
GROUP BY p.id_pedido;
----------------------------------------------------------------
INSERT INTO Factura (id_factura, pago_id, fecha_vencimiento, fecha_emision, impuesto, total, costo_envio)
SELECT 
    p.id_pedido AS id_factura,
    p.id_pedido AS pago_id,
    DATEADD(day, 7, GETDATE()) AS fecha_vencimiento, -- Por ejemplo, 7 días después de la fecha actual
    GETDATE() AS fecha_emision, -- Fecha actual
    ROUND((p.total * 0.19), 2) AS impuesto, -- Calcula el impuesto como el 19% del total del pedido
    (p.total + ROUND((p.total * 0.19), 2) + e.costo_envio) AS total, -- Calcula el total como el total del pedido más el impuesto más el costo de envío
    e.costo_envio
FROM Pedido p
JOIN Envio e ON p.id_pedido = e.pedido_id;










